import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error

# Load the dataset (example data)
data = {
    'user_id': [1, 1, 2, 2, 3, 3, 4, 4],
    'product_id': ['A', 'B', 'A', 'C', 'B', 'C', 'A', 'B'],
    'rating': [5, 3, 4, 5, 2, 5, 3, 4],
}

df = pd.DataFrame(data)

# Encode user_id and product_id
user_encoder = LabelEncoder()
df['user_id_encoded'] = user_encoder.fit_transform(df['user_id'])

product_encoder = LabelEncoder()
df['product_id_encoded'] = product_encoder.fit_transform(df['product_id'])

# Split data into training and testing sets
train_df, test_df = train_test_split(df, test_size=0.2, random_state=42)

# Create a user-item matrix
user_item_matrix = train_df.pivot_table(index='user_id_encoded', columns='product_id_encoded', values='rating', fill_value=0)

# Calculate cosine similarity between users
user_similarity = cosine_similarity(user_item_matrix)

# Function to predict ratings based on similar users
def predict_rating(user_id_encoded, product_id_encoded, user_item_matrix, user_similarity):
    if user_id_encoded in user_item_matrix.index and product_id_encoded in user_item_matrix.columns:
        similar_users = user_similarity[user_id_encoded]
        weighted_sum = np.dot(similar_users, user_item_matrix.fillna(0).values)
        return round(weighted_sum[user_id_encoded] / (np.sum(similar_users) + 1e-9), 2)
    else:
        return None

# Evaluate the recommendation system using Mean Squared Error (MSE)
def evaluate_model(test_df, user_item_matrix, user_similarity):
    actual_ratings = []
    predicted_ratings = []

    for _, row in test_df.iterrows():
        user_id_encoded = row['user_id_encoded']
        product_id_encoded = row['product_id_encoded']
        actual_ratings.append(row['rating'])

        predicted_rating = predict_rating(user_id_encoded, product_id_encoded, user_item_matrix, user_similarity)
        predicted_ratings.append(predicted_rating if predicted_rating else np.mean(actual_ratings))  

    mse = mean_squared_error(actual_ratings, predicted_ratings)
    return round(mse, 3)

# Run evaluation
mse = evaluate_model(test_df, user_item_matrix, user_similarity)
print(f"Mean Squared Error: {mse}")

# Function to recommend products for a user
def recommend_products(user_id, user_item_matrix, user_similarity, df, num_recommendations=3):
    user_id_encoded = user_encoder.transform([user_id])[0]
    rated_products = df[df['user_id'] == user_id]['product_id_encoded'].unique()
    unrated_products = [p for p in df['product_id_encoded'].unique() if p not in rated_products]

    predictions = []
    for product_id_encoded in unrated_products:
        predicted_rating = predict_rating(user_id_encoded, product_id_encoded, user_item_matrix, user_similarity)
        predictions.append((product_id_encoded, predicted_rating))

    predictions.sort(key=lambda x: x[1], reverse=True)
    top_recommendations = predictions[:num_recommendations]

    recommended_products = [product_encoder.inverse_transform([product_id])[0] for product_id, _ in top_recommendations]
    return recommended_products

# Example: Get recommendations for user 1
user_id_to_recommend = 1
recommended_products = recommend_products(user_id_to_recommend, user_item_matrix, user_similarity, df)
print(f"Recommended products for user {user_id_to_recommend}: {recommended_products}")
